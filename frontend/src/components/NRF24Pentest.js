import React, { useState, useEffect } from 'react';
import { Card, Button, Table, Input, Space, Tag, message, Slider } from 'antd';
import { RadarChartOutlined, StopOutlined, PlayCircleOutlined } from '@ant-design/icons';

const NRF24Pentest = () => {
    const [channels, setChannels] = useState([]);
    const [scanning, setScanning] = useState(false);
    const [loading, setLoading] = useState(false);
    const [currentScanId, setCurrentScanId] = useState(null);
    const [capturing, setCapturing] = useState(false);
    const [currentCaptureId, setCurrentCaptureId] = useState(null);
    const [selectedChannel, setSelectedChannel] = useState(0);
    const [capturedPackets, setCapturedPackets] = useState([]);
    const [channelRange, setChannelRange] = useState([0, 125]);

    // Функция для запуска сканирования
    const startScan = async () => {
        try {
            setLoading(true);
            const response = await fetch('/api/v1/nrf24/pentest/scan/start', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    start_channel: channelRange[0],
                    end_channel: channelRange[1]
                })
            });
            const data = await response.json();
            if (data.status === 'success') {
                setCurrentScanId(data.scan_id);
                setScanning(true);
                message.success('Сканирование запущено');
                // Запускаем периодическое получение результатов
                pollScanResults(data.scan_id);
            }
        } catch (error) {
            message.error('Ошибка при запуске сканирования');
        } finally {
            setLoading(false);
        }
    };

    // Функция для периодического получения результатов сканирования
    const pollScanResults = async (scanId) => {
        try {
            const response = await fetch(`/api/v1/nrf24/pentest/scan/${scanId}`);
            const data = await response.json();
            setChannels(data);
            if (data.length > 0) {
                setScanning(false);
            } else {
                setTimeout(() => pollScanResults(scanId), 2000);
            }
        } catch (error) {
            console.error('Ошибка при получении результатов:', error);
            setScanning(false);
        }
    };

    // Функция для запуска захвата пакетов
    const startCapture = async () => {
        try {
            const response = await fetch('/api/v1/nrf24/pentest/capture/start', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ channel: selectedChannel })
            });
            const data = await response.json();
            if (data.status === 'success') {
                setCurrentCaptureId(data.capture_id);
                setCapturing(true);
                message.success('Захват пакетов запущен');
            }
        } catch (error) {
            message.error('Ошибка при запуске захвата');
        }
    };

    // Функция для остановки захвата
    const stopCapture = async () => {
        try {
            if (currentCaptureId) {
                await fetch(`/api/v1/nrf24/pentest/capture/stop/${currentCaptureId}`, {
                    method: 'POST'
                });
                setCapturing(false);
                setCurrentCaptureId(null);
                message.success('Захват остановлен');
            }
        } catch (error) {
            message.error('Ошибка при остановке захвата');
        }
    };

    // Функция для воспроизведения пакета
    const replayPacket = async (packet) => {
        try {
            const response = await fetch('/api/v1/nrf24/pentest/replay', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    packet_data: packet.data,
                    channel: selectedChannel
                })
            });
            const data = await response.json();
            if (data.status === 'success') {
                message.success('Пакет отправлен');
            }
        } catch (error) {
            message.error('Ошибка при отправке пакета');
        }
    };

    // Колонки для таблицы каналов
    const channelsColumns = [
        {
            title: 'Канал',
            dataIndex: 'channel',
            key: 'channel',
        },
        {
            title: 'Сила сигнала',
            dataIndex: 'strength',
            key: 'strength',
            render: (strength) => {
                const color = strength > 7 ? 'green' : strength > 4 ? 'orange' : 'red';
                return <Tag color={color}>{strength}</Tag>;
            }
        },
        {
            title: 'Действия',
            key: 'actions',
            render: (_, record) => (
                <Button
                    type="primary"
                    onClick={() => {
                        setSelectedChannel(record.channel);
                        startCapture();
                    }}
                    disabled={capturing}
                >
                    Захват
                </Button>
            ),
        },
    ];

    // Колонки для таблицы пакетов
    const packetsColumns = [
        {
            title: 'Время',
            dataIndex: 'timestamp',
            key: 'timestamp',
        },
        {
            title: 'Данные',
            dataIndex: 'data',
            key: 'data',
            render: (data) => <code>{data.join(' ')}</code>
        },
        {
            title: 'Действия',
            key: 'actions',
            render: (_, record) => (
                <Button
                    onClick={() => replayPacket(record)}
                >
                    Воспроизвести
                </Button>
            ),
        },
    ];

    return (
        <div style={{ padding: '20px' }}>
            <Space direction="vertical" style={{ width: '100%' }} size="large">
                {/* Карточка управления */}
                <Card title="Управление NRF24">
                    <Space direction="vertical" style={{ width: '100%' }}>
                        <div>
                            <p>Диапазон каналов:</p>
                            <Slider
                                range
                                min={0}
                                max={125}
                                value={channelRange}
                                onChange={setChannelRange}
                                disabled={scanning}
                            />
                        </div>
                        <Space>
                            <Button
                                type="primary"
                                icon={<RadarChartOutlined />}
                                onClick={startScan}
                                loading={loading}
                                disabled={scanning}
                            >
                                {scanning ? 'Сканирование...' : 'Сканировать частоты'}
                            </Button>
                            {capturing && (
                                <Button
                                    type="primary"
                                    danger
                                    icon={<StopOutlined />}
                                    onClick={stopCapture}
                                >
                                    Остановить захват
                                </Button>
                            )}
                        </Space>
                    </Space>
                </Card>

                {/* Таблица найденных каналов */}
                <Card title="Найденные каналы">
                    <Table
                        columns={channelsColumns}
                        dataSource={channels}
                        rowKey="channel"
                        pagination={false}
                    />
                </Card>

                {/* Таблица захваченных пакетов */}
                <Card title="Захваченные пакеты">
                    <Table
                        columns={packetsColumns}
                        dataSource={capturedPackets}
                        rowKey="timestamp"
                        pagination={false}
                    />
                </Card>
            </Space>
        </div>
    );
};

export default NRF24Pentest; 