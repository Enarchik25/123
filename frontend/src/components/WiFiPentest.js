import React, { useState, useEffect } from 'react';
import { Card, Button, Table, Input, Space, Tag, message } from 'antd';
import { WifiOutlined, StopOutlined, PlayCircleOutlined } from '@ant-design/icons';

const WiFiPentest = () => {
    const [networks, setNetworks] = useState([]);
    const [activeAttacks, setActiveAttacks] = useState([]);
    const [monitorMode, setMonitorMode] = useState(false);
    const [loading, setLoading] = useState(false);
    const [fakeAPForm, setFakeAPForm] = useState({ ssid: '', channel: 1 });

    // Функция для сканирования сетей
    const scanNetworks = async () => {
        try {
            setLoading(true);
            const response = await fetch('/api/v1/wifi/pentest/scan');
            const data = await response.json();
            setNetworks(data);
        } catch (error) {
            message.error('Ошибка при сканировании сетей');
        } finally {
            setLoading(false);
        }
    };

    // Функция для включения/выключения режима мониторинга
    const toggleMonitorMode = async () => {
        try {
            setLoading(true);
            const endpoint = monitorMode ? '/stop' : '/start';
            await fetch(`/api/v1/wifi/pentest/monitor${endpoint}`, { method: 'POST' });
            setMonitorMode(!monitorMode);
            message.success(`Режим мониторинга ${monitorMode ? 'выключен' : 'включен'}`);
        } catch (error) {
            message.error('Ошибка при переключении режима мониторинга');
        } finally {
            setLoading(false);
        }
    };

    // Функция для запуска деаутентификации
    const startDeauth = async (bssid) => {
        try {
            const response = await fetch('/api/v1/wifi/pentest/attack/deauth', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ bssid })
            });
            const data = await response.json();
            message.success('Атака деаутентификации запущена');
            getActiveAttacks();
        } catch (error) {
            message.error('Ошибка при запуске атаки');
        }
    };

    // Функция для создания фейковой точки доступа
    const createFakeAP = async () => {
        try {
            const response = await fetch('/api/v1/wifi/pentest/attack/fake_ap', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(fakeAPForm)
            });
            const data = await response.json();
            message.success('Фейковая точка доступа создана');
            getActiveAttacks();
        } catch (error) {
            message.error('Ошибка при создании фейковой точки доступа');
        }
    };

    // Функция для остановки атаки
    const stopAttack = async (attackId) => {
        try {
            await fetch(`/api/v1/wifi/pentest/attack/stop/${attackId}`, { method: 'POST' });
            message.success('Атака остановлена');
            getActiveAttacks();
        } catch (error) {
            message.error('Ошибка при остановке атаки');
        }
    };

    // Получение списка активных атак
    const getActiveAttacks = async () => {
        try {
            const response = await fetch('/api/v1/wifi/pentest/attacks');
            const data = await response.json();
            setActiveAttacks(data);
        } catch (error) {
            console.error('Ошибка при получении списка атак:', error);
        }
    };

    // Периодическое обновление данных
    useEffect(() => {
        const interval = setInterval(() => {
            if (monitorMode) {
                scanNetworks();
                getActiveAttacks();
            }
        }, 5000);

        return () => clearInterval(interval);
    }, [monitorMode]);

    // Колонки для таблицы сетей
    const networksColumns = [
        {
            title: 'SSID',
            dataIndex: 'ssid',
            key: 'ssid',
        },
        {
            title: 'BSSID',
            dataIndex: 'bssid',
            key: 'bssid',
        },
        {
            title: 'Канал',
            dataIndex: 'channel',
            key: 'channel',
        },
        {
            title: 'Шифрование',
            dataIndex: 'encryption',
            key: 'encryption',
        },
        {
            title: 'Сигнал',
            dataIndex: 'signal',
            key: 'signal',
        },
        {
            title: 'Действия',
            key: 'actions',
            render: (_, record) => (
                <Space>
                    <Button 
                        type="primary" 
                        danger 
                        onClick={() => startDeauth(record.bssid)}
                        disabled={!monitorMode}
                    >
                        Деаутентификация
                    </Button>
                </Space>
            ),
        },
    ];

    // Колонки для таблицы активных атак
    const attacksColumns = [
        {
            title: 'ID',
            dataIndex: 'id',
            key: 'id',
        },
        {
            title: 'Тип',
            dataIndex: 'type',
            key: 'type',
            render: (type) => {
                const colors = {
                    deauth: 'red',
                    fake_ap: 'blue',
                    capture: 'green'
                };
                return <Tag color={colors[type]}>{type}</Tag>;
            }
        },
        {
            title: 'Цель',
            dataIndex: 'bssid',
            key: 'bssid',
        },
        {
            title: 'Время начала',
            dataIndex: 'start_time',
            key: 'start_time',
        },
        {
            title: 'Действия',
            key: 'actions',
            render: (_, record) => (
                <Button 
                    type="primary" 
                    danger 
                    icon={<StopOutlined />}
                    onClick={() => stopAttack(record.id)}
                >
                    Остановить
                </Button>
            ),
        },
    ];

    return (
        <div style={{ padding: '20px' }}>
            <Space direction="vertical" style={{ width: '100%' }} size="large">
                {/* Карточка управления */}
                <Card title="Управление WiFi">
                    <Space>
                        <Button
                            type={monitorMode ? "danger" : "primary"}
                            icon={<WifiOutlined />}
                            onClick={toggleMonitorMode}
                            loading={loading}
                        >
                            {monitorMode ? 'Выключить режим мониторинга' : 'Включить режим мониторинга'}
                        </Button>
                        <Button
                            type="primary"
                            icon={<PlayCircleOutlined />}
                            onClick={scanNetworks}
                            disabled={!monitorMode}
                            loading={loading}
                        >
                            Сканировать сети
                        </Button>
                    </Space>
                </Card>

                {/* Карточка создания фейковой точки доступа */}
                <Card title="Создать фейковую точку доступа">
                    <Space>
                        <Input
                            placeholder="SSID"
                            value={fakeAPForm.ssid}
                            onChange={e => setFakeAPForm({ ...fakeAPForm, ssid: e.target.value })}
                        />
                        <Input
                            type="number"
                            placeholder="Канал"
                            value={fakeAPForm.channel}
                            onChange={e => setFakeAPForm({ ...fakeAPForm, channel: parseInt(e.target.value) })}
                        />
                        <Button
                            type="primary"
                            onClick={createFakeAP}
                            disabled={!monitorMode || !fakeAPForm.ssid}
                        >
                            Создать
                        </Button>
                    </Space>
                </Card>

                {/* Таблица найденных сетей */}
                <Card title="Найденные сети">
                    <Table
                        columns={networksColumns}
                        dataSource={networks}
                        rowKey="bssid"
                        pagination={false}
                    />
                </Card>

                {/* Таблица активных атак */}
                <Card title="Активные атаки">
                    <Table
                        columns={attacksColumns}
                        dataSource={activeAttacks}
                        rowKey="id"
                        pagination={false}
                    />
                </Card>
            </Space>
        </div>
    );
};

export default WiFiPentest; 