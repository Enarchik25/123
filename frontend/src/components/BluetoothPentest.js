import React, { useState, useEffect } from 'react';
import { Card, Button, Table, Input, Space, Tag, message } from 'antd';
import { BluetoothOutlined, StopOutlined, PlayCircleOutlined } from '@ant-design/icons';

const BluetoothPentest = () => {
    const [devices, setDevices] = useState([]);
    const [activeAttacks, setActiveAttacks] = useState([]);
    const [scanning, setScanning] = useState(false);
    const [loading, setLoading] = useState(false);
    const [currentScanId, setCurrentScanId] = useState(null);
    const [macAddress, setMacAddress] = useState('');

    // Функция для запуска сканирования
    const startScan = async () => {
        try {
            setLoading(true);
            const response = await fetch('/api/v1/bluetooth/pentest/scan/start', {
                method: 'POST'
            });
            const data = await response.json();
            if (data.status === 'success') {
                setCurrentScanId(data.scan_id);
                setScanning(true);
                message.success('Сканирование запущено');
                // Запускаем периодическое получение результатов
                pollScanResults(data.scan_id);
            }
        } catch (error) {
            message.error('Ошибка при запуске сканирования');
        } finally {
            setLoading(false);
        }
    };

    // Функция для периодического получения результатов сканирования
    const pollScanResults = async (scanId) => {
        try {
            const response = await fetch(`/api/v1/bluetooth/pentest/scan/${scanId}`);
            const data = await response.json();
            setDevices(data);
            if (data.length > 0) {
                setScanning(false);
            } else {
                setTimeout(() => pollScanResults(scanId), 2000);
            }
        } catch (error) {
            console.error('Ошибка при получении результатов:', error);
            setScanning(false);
        }
    };

    // Функция для подмены MAC-адреса
    const spoofMac = async () => {
        try {
            const response = await fetch('/api/v1/bluetooth/pentest/spoof', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ new_mac: macAddress })
            });
            const data = await response.json();
            if (data.status === 'success') {
                message.success('MAC-адрес успешно изменен');
            } else {
                message.error(data.message);
            }
        } catch (error) {
            message.error('Ошибка при изменении MAC-адреса');
        }
    };

    // Функция для запуска атаки
    const startAttack = async (targetMac, attackType) => {
        try {
            const response = await fetch('/api/v1/bluetooth/pentest/attack/start', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ target_mac: targetMac, attack_type: attackType })
            });
            const data = await response.json();
            if (data.status === 'success') {
                message.success(`Атака ${attackType} запущена`);
                getActiveAttacks();
            }
        } catch (error) {
            message.error('Ошибка при запуске атаки');
        }
    };

    // Функция для остановки атаки
    const stopAttack = async (attackId) => {
        try {
            await fetch(`/api/v1/bluetooth/pentest/attack/stop/${attackId}`, {
                method: 'POST'
            });
            message.success('Атака остановлена');
            getActiveAttacks();
        } catch (error) {
            message.error('Ошибка при остановке атаки');
        }
    };

    // Получение списка активных атак
    const getActiveAttacks = async () => {
        try {
            const response = await fetch('/api/v1/bluetooth/pentest/attacks');
            const data = await response.json();
            setActiveAttacks(data);
        } catch (error) {
            console.error('Ошибка при получении списка атак:', error);
        }
    };

    // Периодическое обновление списка атак
    useEffect(() => {
        const interval = setInterval(() => {
            getActiveAttacks();
        }, 5000);

        return () => clearInterval(interval);
    }, []);

    // Колонки для таблицы устройств
    const devicesColumns = [
        {
            title: 'MAC-адрес',
            dataIndex: 'mac',
            key: 'mac',
        },
        {
            title: 'Имя',
            dataIndex: 'name',
            key: 'name',
        },
        {
            title: 'Действия',
            key: 'actions',
            render: (_, record) => (
                <Space>
                    <Button
                        type="primary"
                        onClick={() => startAttack(record.mac, 'flood')}
                    >
                        Флуд
                    </Button>
                    <Button
                        onClick={() => startAttack(record.mac, 'connect')}
                    >
                        Подключиться
                    </Button>
                </Space>
            ),
        },
    ];

    // Колонки для таблицы активных атак
    const attacksColumns = [
        {
            title: 'ID',
            dataIndex: 'id',
            key: 'id',
        },
        {
            title: 'Тип',
            dataIndex: 'type',
            key: 'type',
            render: (type) => {
                const colors = {
                    flood: 'red',
                    connect: 'blue'
                };
                return <Tag color={colors[type]}>{type}</Tag>;
            }
        },
        {
            title: 'Цель',
            dataIndex: 'target',
            key: 'target',
        },
        {
            title: 'Время начала',
            dataIndex: 'start_time',
            key: 'start_time',
        },
        {
            title: 'Действия',
            key: 'actions',
            render: (_, record) => (
                <Button
                    type="primary"
                    danger
                    icon={<StopOutlined />}
                    onClick={() => stopAttack(record.id)}
                >
                    Остановить
                </Button>
            ),
        },
    ];

    return (
        <div style={{ padding: '20px' }}>
            <Space direction="vertical" style={{ width: '100%' }} size="large">
                {/* Карточка управления */}
                <Card title="Управление Bluetooth">
                    <Space>
                        <Button
                            type="primary"
                            icon={<BluetoothOutlined />}
                            onClick={startScan}
                            loading={loading}
                        >
                            {scanning ? 'Сканирование...' : 'Сканировать устройства'}
                        </Button>
                    </Space>
                </Card>

                {/* Карточка подмены MAC */}
                <Card title="Подмена MAC-адреса">
                    <Space>
                        <Input
                            placeholder="Новый MAC-адрес"
                            value={macAddress}
                            onChange={e => setMacAddress(e.target.value)}
                        />
                        <Button
                            type="primary"
                            onClick={spoofMac}
                            disabled={!macAddress}
                        >
                            Изменить
                        </Button>
                    </Space>
                </Card>

                {/* Таблица найденных устройств */}
                <Card title="Найденные устройства">
                    <Table
                        columns={devicesColumns}
                        dataSource={devices}
                        rowKey="mac"
                        pagination={false}
                    />
                </Card>

                {/* Таблица активных атак */}
                <Card title="Активные атаки">
                    <Table
                        columns={attacksColumns}
                        dataSource={activeAttacks}
                        rowKey="id"
                        pagination={false}
                    />
                </Card>
            </Space>
        </div>
    );
};

export default BluetoothPentest; 