from fastapi import APIRouter, HTTPException
from typing import List, Dict
from ..services.bluetooth_pentest import BluetoothPentest

router = APIRouter()
bluetooth_pentest = BluetoothPentest()

@router.post("/scan/start")
async def start_scan() -> Dict:
    """Запуск сканирования Bluetooth устройств"""
    return await bluetooth_pentest.start_scan()

@router.get("/scan/{scan_id}")
async def get_scan_results(scan_id: str) -> List[Dict]:
    """Получение результатов сканирования"""
    return await bluetooth_pentest.get_scan_results(scan_id)

@router.post("/capture/start")
async def start_packet_capture(mac: str = None) -> Dict:
    """Запуск захвата пакетов"""
    return await bluetooth_pentest.start_packet_capture(mac)

@router.post("/capture/stop/{capture_id}")
async def stop_capture(capture_id: str) -> Dict:
    """Остановка захвата пакетов"""
    return await bluetooth_pentest.stop_capture(capture_id)

@router.post("/spoof")
async def spoof_mac(new_mac: str) -> Dict:
    """Подмена MAC-адреса"""
    return await bluetooth_pentest.spoof_mac(new_mac)

@router.post("/attack/start")
async def start_ble_attack(target_mac: str, attack_type: str) -> Dict:
    """Запуск атаки на BLE устройство"""
    return await bluetooth_pentest.start_ble_attack(target_mac, attack_type)

@router.post("/attack/stop/{attack_id}")
async def stop_attack(attack_id: str) -> Dict:
    """Остановка атаки"""
    return await bluetooth_pentest.stop_attack(attack_id)

@router.get("/attacks")
async def get_active_attacks() -> List[Dict]:
    """Получение списка активных атак"""
    return await bluetooth_pentest.get_active_attacks() 